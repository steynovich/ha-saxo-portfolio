[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ha-saxo-portfolio"
version = "1.0.1"
description = "Home Assistant integration for Saxo Portfolio monitoring"
authors = [{name = "Home Assistant Community", email = "hello@home-assistant.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
]
dependencies = [
    "homeassistant>=2024.1.0",
    "saxo-openapi>=0.6.0",
    "aiohttp>=3.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-homeassistant-custom-component>=0.13.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/steynovich/ha-saxo-portfolio"
"Bug Reports" = "https://github.com/steynovich/ha-saxo-portfolio/issues"
"Source" = "https://github.com/steynovich/ha-saxo-portfolio"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["custom_components*"]

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler is an except clause without an exception type
    "C", # complexity
    "D", # docstrings
    "E", # pycodestyle
    "F", # pyflakes/autoflake
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004", # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Combine multiple with statements
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of conditional assignment
    "T20", # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP", # pyupgrade
    "W", # pycodestyle
]

ignore = [
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D406", # Section name should end with a newline
    "D407", # Section name underlining
    "E501", # line too long
    "E731", # do not assign a lambda expression, use a def
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.11"
ignore_errors = true
follow_imports = "silent"
ignore_missing_imports = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true